services:
  app:
    # Build from local files and Dockerfile rather than pulling an image.
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      - database
      - redis
    ports:
      - 3000:3000
    stdin_open: true
    tty: true
    volumes:
      # Bind mount: mounts application code on the host to the /app directory on
      # the container. Changes to the host files are immediately reflected in
      # the container.
      - .:/app
      # Named volumes: Persists gems and node_modules between container
      # rebuilds. If packages are changed, the volume must be deleted before
      # recreating the service.
      - gem_cache:/usr/local/bundle/gems
      - node_modules:/app/node_modules
    env_file: .env
    environment:
      RAILS_ENV: development

  database:
    image: postgres:12.3
    volumes:
      - db_data:/var/lib/postgresql/data
      # After the image entrypoint creates the default postgres user and db, it
      # will run any scripts found in docker-entrypoint-initdb.d.
      - ./db/scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    env_file: .env

  redis:
    image: redis:6.2.3

  sidekiq:
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      - app
      - database
      - redis
    volumes:
      - .:/app
      - gem_cache:/usr/local/bundle/gems
      - node_modules:/app/node_modules
    env_file: .env
    environment:
      RAILS_ENV: development
    # Override the default entrypoint in the Dockerfile.
    entrypoint: ./entrypoints/sidekiq-entrypoint.sh

# When Docker creates volumes, the contents of the volume are stored in a part
# of the host filesystem that's managed by Docker: /var/lib/docker/volumes.
volumes:
  gem_cache:
  db_data:
  node_modules: